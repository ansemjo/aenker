{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"aenker aenker is a simple commandline utility to encrypt files to a public key ( Curve25519 ) with an authenticated encryption scheme ( ChaCha20Poly1305 ). This is basically an ECIES . The input is split into smaller chunks internally and is encrypted & authenticated individually. Padding and concatenation is done similarly to InterMAC . The key used for encryption is derived with HKDF using Blake2b after performing anonymous Diffie-Hellman with a given public and a random ephemeral private key. All this is further described in the specification . Authenticated encryption authenticates the ciphertext upon decryption and combined with the above construction any chunk reordering, bit-flips or even truncation can be detected and are shown as errors. Only ciphertext that has been successfully decrypted and authenticated is ever written to the output. The chunking still alleviates the need to fit the entire file into memory at once or do two passes over all data. Thus you can also encrypt files of many gigabytes. INSTALLATION Install directly with go : go get -u github.com/ansemjo/aenker Install a binary release / package Download a release from GitHub (replace $VERSION with the desired release): curl -Lo aenker https://github.com/ansemjo/aenker/releases/download/$VERSION/aenker-linux-amd64 chmod +x aenker ./aenker --help Compile from sources: Download a tarball from GitHub and use the included makefile to build a static binary and embed proper version information: cd aenker-master/ make make install PREFIX=~/.local USAGE Key Generation First, you need a keypair. To generate a new random keypair use the builtin keygenerator: aenker keygen [-f where/to/store/seckey] Without any arguments, this will store the key in the default location ~/.local/share/aenker/aenkerkey and your public key will be printed to the terminal. Send your public key to anyone who wants to encrypt data for you and keep your private key .. well, private. If you want to display your public key later or calculate the public key to a given private key, you can use the subcommand show : aenker show [-k path/to/seckey] Note: aenker only performs anonymous Diffie-Hellman and the keys are not signed or certified. To protect against man-in-the-middle attacks you should transfer the key over a secure channel or verify the integrity on a different channel. Encryption / Decryption Encrypt a simple message using the public key with the subcommand seal : echo 'Hello, World!' | aenker seal -p lGLD...AFBo= > message.ae Decrypt messages with the open subcommand. If your key is stored at the default location you can decrypt a message by simply piping the encrypted message into aenker: aenker open [-k path/to/seckey] < message.ae Input and output files can be specified with the -i and -o flags respectively. The terms seal and open are commonly used in the context of AEADs but you can also use their aliases encrypt and decrypt if you prefer: aenker decrypt -i documents.tar.ae -k mykey | tar -xf - The key flags -p / --peer and -k / --key accept the base64-encoded keys on the commandline or the name of a file which contains the key alone on one line. Specifically, the first match to the regular expression /^[A-Za-z0-9+/]{43}=$/ is used, so you can add as many comments as you like to your key files. Specifying the key on the commandline is convenient for public keys but should be avoided for private keys: ... | aenker seal -p lGLDUgFvp8TSwJ17VC9k0/T9mNWvfGoJ42zauMkAFBo= > message.ae Advanced Key Generation Generally, Curve25519 - and thus aenker - accepts any 32 byte value as a key. You could generate a private key by any other means and then only calculate the public key to distribute it. Possibilities include: reading 32 bytes of system randomness from /dev/urandom use an implementation of Argon2i to derive a key from a password, i.e. ansemjo/stdkdf ... DOCUMENTATION All of the commands output a nicely formatted help message, so you can use help at any time: aenker help If you prefer, you can instead install and read manpages with: aenker docs man -d ~/.local/share/man/ man aenker Completion scripts for your shell can be generated and sourced with: . <(aenker docs completion) File Detection Append this piece to your ~/.magic file: 0 string aenker\\xe7\\x9e aenker encrypted file !:mime application/octet-stream And file(1) should detect encrypted files as aenker encrypted file . DISCLAIMER Please be advised that I am not a professional cryptographer. This is merely a hobby of mine which I hope can be useful to you. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Home"},{"location":"index.html#aenker","text":"aenker is a simple commandline utility to encrypt files to a public key ( Curve25519 ) with an authenticated encryption scheme ( ChaCha20Poly1305 ). This is basically an ECIES . The input is split into smaller chunks internally and is encrypted & authenticated individually. Padding and concatenation is done similarly to InterMAC . The key used for encryption is derived with HKDF using Blake2b after performing anonymous Diffie-Hellman with a given public and a random ephemeral private key. All this is further described in the specification . Authenticated encryption authenticates the ciphertext upon decryption and combined with the above construction any chunk reordering, bit-flips or even truncation can be detected and are shown as errors. Only ciphertext that has been successfully decrypted and authenticated is ever written to the output. The chunking still alleviates the need to fit the entire file into memory at once or do two passes over all data. Thus you can also encrypt files of many gigabytes.","title":"aenker"},{"location":"index.html#installation","text":"","title":"INSTALLATION"},{"location":"index.html#install-directly-with-go","text":"go get -u github.com/ansemjo/aenker","title":"Install directly with go:"},{"location":"index.html#install-a-binary-release-package","text":"Download a release from GitHub (replace $VERSION with the desired release): curl -Lo aenker https://github.com/ansemjo/aenker/releases/download/$VERSION/aenker-linux-amd64 chmod +x aenker ./aenker --help","title":"Install a binary release / package"},{"location":"index.html#compile-from-sources","text":"Download a tarball from GitHub and use the included makefile to build a static binary and embed proper version information: cd aenker-master/ make make install PREFIX=~/.local","title":"Compile from sources:"},{"location":"index.html#usage","text":"","title":"USAGE"},{"location":"index.html#key-generation","text":"First, you need a keypair. To generate a new random keypair use the builtin keygenerator: aenker keygen [-f where/to/store/seckey] Without any arguments, this will store the key in the default location ~/.local/share/aenker/aenkerkey and your public key will be printed to the terminal. Send your public key to anyone who wants to encrypt data for you and keep your private key .. well, private. If you want to display your public key later or calculate the public key to a given private key, you can use the subcommand show : aenker show [-k path/to/seckey] Note: aenker only performs anonymous Diffie-Hellman and the keys are not signed or certified. To protect against man-in-the-middle attacks you should transfer the key over a secure channel or verify the integrity on a different channel.","title":"Key Generation"},{"location":"index.html#encryption-decryption","text":"Encrypt a simple message using the public key with the subcommand seal : echo 'Hello, World!' | aenker seal -p lGLD...AFBo= > message.ae Decrypt messages with the open subcommand. If your key is stored at the default location you can decrypt a message by simply piping the encrypted message into aenker: aenker open [-k path/to/seckey] < message.ae Input and output files can be specified with the -i and -o flags respectively. The terms seal and open are commonly used in the context of AEADs but you can also use their aliases encrypt and decrypt if you prefer: aenker decrypt -i documents.tar.ae -k mykey | tar -xf - The key flags -p / --peer and -k / --key accept the base64-encoded keys on the commandline or the name of a file which contains the key alone on one line. Specifically, the first match to the regular expression /^[A-Za-z0-9+/]{43}=$/ is used, so you can add as many comments as you like to your key files. Specifying the key on the commandline is convenient for public keys but should be avoided for private keys: ... | aenker seal -p lGLDUgFvp8TSwJ17VC9k0/T9mNWvfGoJ42zauMkAFBo= > message.ae","title":"Encryption / Decryption"},{"location":"index.html#advanced-key-generation","text":"Generally, Curve25519 - and thus aenker - accepts any 32 byte value as a key. You could generate a private key by any other means and then only calculate the public key to distribute it. Possibilities include: reading 32 bytes of system randomness from /dev/urandom use an implementation of Argon2i to derive a key from a password, i.e. ansemjo/stdkdf ...","title":"Advanced Key Generation"},{"location":"index.html#documentation","text":"All of the commands output a nicely formatted help message, so you can use help at any time: aenker help If you prefer, you can instead install and read manpages with: aenker docs man -d ~/.local/share/man/ man aenker Completion scripts for your shell can be generated and sourced with: . <(aenker docs completion)","title":"DOCUMENTATION"},{"location":"index.html#file-detection","text":"Append this piece to your ~/.magic file: 0 string aenker\\xe7\\x9e aenker encrypted file !:mime application/octet-stream And file(1) should detect encrypted files as aenker encrypted file .","title":"File Detection"},{"location":"index.html#disclaimer","text":"Please be advised that I am not a professional cryptographer. This is merely a hobby of mine which I hope can be useful to you. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"DISCLAIMER"},{"location":"LICENSE.html","text":"MIT License Copyright (c) 2018 Anton Semjonov Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"SPECIFICATION.html","text":"Specification There is a small decryption script written in Python. It should provide an easily readable overview of the inner workings. File Format First of all, the on-disk format of a file encrypted with aenker looks like this: The first eight bytes are 'magic bytes' to recognize files encrypted with aenker. The bytes \\xe7\\x9e are the first two bytes of the Blake2b hash of the word 'aenker': >>> hashlib.blake2b(b'aenker').digest()[:2] b'\\xe7\\x9e' The salt is randomly generated and is used in conjunction with the private part of the stored ephemeral public key to derive the chunk encryption key. Chunking The incoming plaintext is split into equal parts of length chunksize . To be more precise, it is split into equal parts of length chunksize-1 and is then padded to the full chunksize length. Data is padded with either \\x00 or \\x01 , depending on the last byte of input data, and then a marker byte is appended, which indicates whether this is a running chunk, a final chunk without padding or a final chunk with padding. padding byte if ... \\x01 last data byte is \\x00 \\x00 last data byte is NOT \\x00 final byte chunk type \\x00 running chunk, at least one more following \\x01 final chunk, no padding \\x02 final chunk, padding was added In the aenker commandline tool the chunksize is fixed at 1984 . This results in exactly 2 kB ciphertext for small messages and padding and overhead losses approach < 1% for messages larger than 1 MB. Key Derivation When encrypting to a recipient's public key, a random ephemeral private key is generated and anonymous Diffie-Hellman is performed. The encryption key is then derived from the resulting shared key with HKDF using unkeyed Blake2b-384, a random 8 byte salt and the info string aenker elliptic : The ephemeral public key is calculated and then stored in the header, together with the random 8 byte salt. Encryption Each chunk is encrypted with ChaCha20Poly1305 using a derived key per message. Each chunk uses the same key, an incrementing nonce and the serialized file header as associated data . Naturally, the authentication tag adds some length to the encrypted data. You have to account for that during decryption when reading the chunks back. See the package chunkstream if you want to use this chunked construction in your own application. Nonce Counter The implementation can be seen in noncecounter.go . Basically, it is a simple 64-bit incrementing counter which is encoded in LittleEndian into a 12 byte buffer: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 ... Due to the use of this simple nonce construction, the nonce need not be saved seperately but it REQUIRES that a unique key is used for every message. Otherwise message integrity and confidentiality could be broken. Hence, an ephemeral keypair is used.","title":"Specification"},{"location":"SPECIFICATION.html#specification","text":"There is a small decryption script written in Python. It should provide an easily readable overview of the inner workings.","title":"Specification"},{"location":"SPECIFICATION.html#file-format","text":"First of all, the on-disk format of a file encrypted with aenker looks like this: The first eight bytes are 'magic bytes' to recognize files encrypted with aenker. The bytes \\xe7\\x9e are the first two bytes of the Blake2b hash of the word 'aenker': >>> hashlib.blake2b(b'aenker').digest()[:2] b'\\xe7\\x9e' The salt is randomly generated and is used in conjunction with the private part of the stored ephemeral public key to derive the chunk encryption key.","title":"File Format"},{"location":"SPECIFICATION.html#chunking","text":"The incoming plaintext is split into equal parts of length chunksize . To be more precise, it is split into equal parts of length chunksize-1 and is then padded to the full chunksize length. Data is padded with either \\x00 or \\x01 , depending on the last byte of input data, and then a marker byte is appended, which indicates whether this is a running chunk, a final chunk without padding or a final chunk with padding. padding byte if ... \\x01 last data byte is \\x00 \\x00 last data byte is NOT \\x00 final byte chunk type \\x00 running chunk, at least one more following \\x01 final chunk, no padding \\x02 final chunk, padding was added In the aenker commandline tool the chunksize is fixed at 1984 . This results in exactly 2 kB ciphertext for small messages and padding and overhead losses approach < 1% for messages larger than 1 MB.","title":"Chunking"},{"location":"SPECIFICATION.html#key-derivation","text":"When encrypting to a recipient's public key, a random ephemeral private key is generated and anonymous Diffie-Hellman is performed. The encryption key is then derived from the resulting shared key with HKDF using unkeyed Blake2b-384, a random 8 byte salt and the info string aenker elliptic : The ephemeral public key is calculated and then stored in the header, together with the random 8 byte salt.","title":"Key Derivation"},{"location":"SPECIFICATION.html#encryption","text":"Each chunk is encrypted with ChaCha20Poly1305 using a derived key per message. Each chunk uses the same key, an incrementing nonce and the serialized file header as associated data . Naturally, the authentication tag adds some length to the encrypted data. You have to account for that during decryption when reading the chunks back. See the package chunkstream if you want to use this chunked construction in your own application.","title":"Encryption"},{"location":"SPECIFICATION.html#nonce-counter","text":"The implementation can be seen in noncecounter.go . Basically, it is a simple 64-bit incrementing counter which is encoded in LittleEndian into a 12 byte buffer: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 ... Due to the use of this simple nonce construction, the nonce need not be saved seperately but it REQUIRES that a unique key is used for every message. Otherwise message integrity and confidentiality could be broken. Hence, an ephemeral keypair is used.","title":"Nonce Counter"},{"location":"aenker.html","text":"aenker Synopsis Aenker is a tool to encrypt files with an authenticated integrated encryption scheme by chunking the input into equal parts and sealing them with a key derived from an anonymous Diffie-Hellman key exchange on an elliptic curve. Many parties can encrypt files for a single recipient by distributing that recipient's public key, while only the recipient can decrypt any of those files afterwards. Options -h, --help help for aenker SEE ALSO aenker docs - generate documentation aenker keygen - generate a new key aenker open - decrypt and authenticate a file aenker pubkey - print public key aenker seal - encrypt and protect a file Auto generated by spf13/cobra on 12-Jul-2019","title":"aenker"},{"location":"aenker.html#aenker","text":"","title":"aenker"},{"location":"aenker.html#synopsis","text":"Aenker is a tool to encrypt files with an authenticated integrated encryption scheme by chunking the input into equal parts and sealing them with a key derived from an anonymous Diffie-Hellman key exchange on an elliptic curve. Many parties can encrypt files for a single recipient by distributing that recipient's public key, while only the recipient can decrypt any of those files afterwards.","title":"Synopsis"},{"location":"aenker.html#options","text":"-h, --help help for aenker","title":"Options"},{"location":"aenker.html#see-also","text":"aenker docs - generate documentation aenker keygen - generate a new key aenker open - decrypt and authenticate a file aenker pubkey - print public key aenker seal - encrypt and protect a file","title":"SEE ALSO"},{"location":"aenker.html#auto-generated-by-spf13cobra-on-12-jul-2019","text":"","title":"Auto generated by spf13/cobra on 12-Jul-2019"},{"location":"aenker_docs.html","text":"aenker docs generate documentation Synopsis Generate documentation or autocompletion scripts. Options -h, --help help for docs SEE ALSO aenker - aenker docs completion - generate autocompletion aenker docs manual - generate manuals Auto generated by spf13/cobra on 12-Jul-2019","title":"Aenker docs"},{"location":"aenker_docs.html#aenker-docs","text":"generate documentation","title":"aenker docs"},{"location":"aenker_docs.html#synopsis","text":"Generate documentation or autocompletion scripts.","title":"Synopsis"},{"location":"aenker_docs.html#options","text":"-h, --help help for docs","title":"Options"},{"location":"aenker_docs.html#see-also","text":"aenker - aenker docs completion - generate autocompletion aenker docs manual - generate manuals","title":"SEE ALSO"},{"location":"aenker_docs.html#auto-generated-by-spf13cobra-on-12-jul-2019","text":"","title":"Auto generated by spf13/cobra on 12-Jul-2019"},{"location":"aenker_docs_completion.html","text":"aenker docs completion generate autocompletion Synopsis Generate autocompletion scripts to be sourced by your shell. aenker docs completion [bash|zsh] [flags] Options -h, --help help for completion -o, --out string output completion script to file SEE ALSO aenker docs - generate documentation Auto generated by spf13/cobra on 12-Jul-2019","title":"Generate autocompletion"},{"location":"aenker_docs_completion.html#aenker-docs-completion","text":"generate autocompletion","title":"aenker docs completion"},{"location":"aenker_docs_completion.html#synopsis","text":"Generate autocompletion scripts to be sourced by your shell. aenker docs completion [bash|zsh] [flags]","title":"Synopsis"},{"location":"aenker_docs_completion.html#options","text":"-h, --help help for completion -o, --out string output completion script to file","title":"Options"},{"location":"aenker_docs_completion.html#see-also","text":"aenker docs - generate documentation","title":"SEE ALSO"},{"location":"aenker_docs_completion.html#auto-generated-by-spf13cobra-on-12-jul-2019","text":"","title":"Auto generated by spf13/cobra on 12-Jul-2019"},{"location":"aenker_docs_manual.html","text":"aenker docs manual generate manuals Synopsis Generate documentation in manpage or markdown format. aenker docs manual [man|markdown] [flags] Options -d, --directory string output directory -h, --help help for manual SEE ALSO aenker docs - generate documentation Auto generated by spf13/cobra on 12-Jul-2019","title":"Generate manpages"},{"location":"aenker_docs_manual.html#aenker-docs-manual","text":"generate manuals","title":"aenker docs manual"},{"location":"aenker_docs_manual.html#synopsis","text":"Generate documentation in manpage or markdown format. aenker docs manual [man|markdown] [flags]","title":"Synopsis"},{"location":"aenker_docs_manual.html#options","text":"-d, --directory string output directory -h, --help help for manual","title":"Options"},{"location":"aenker_docs_manual.html#see-also","text":"aenker docs - generate documentation","title":"SEE ALSO"},{"location":"aenker_docs_manual.html#auto-generated-by-spf13cobra-on-12-jul-2019","text":"","title":"Auto generated by spf13/cobra on 12-Jul-2019"},{"location":"aenker_keygen.html","text":"aenker keygen generate a new key Synopsis Generate and save a new random Curve25519 keypair. aenker keygen [flags] Examples aenker kg -p publickey -o secretkey Options -f, --file string save key to this file (default \"/home/ansemjo/.local/share/aenker/aenkerkey\") -c, --comment string add comment to keyfile -h, --help help for keygen SEE ALSO aenker - aenker keygen pubkey - print public key Auto generated by spf13/cobra on 12-Jul-2019","title":"Generate new key"},{"location":"aenker_keygen.html#aenker-keygen","text":"generate a new key","title":"aenker keygen"},{"location":"aenker_keygen.html#synopsis","text":"Generate and save a new random Curve25519 keypair. aenker keygen [flags]","title":"Synopsis"},{"location":"aenker_keygen.html#examples","text":"aenker kg -p publickey -o secretkey","title":"Examples"},{"location":"aenker_keygen.html#options","text":"-f, --file string save key to this file (default \"/home/ansemjo/.local/share/aenker/aenkerkey\") -c, --comment string add comment to keyfile -h, --help help for keygen","title":"Options"},{"location":"aenker_keygen.html#see-also","text":"aenker - aenker keygen pubkey - print public key","title":"SEE ALSO"},{"location":"aenker_keygen.html#auto-generated-by-spf13cobra-on-12-jul-2019","text":"","title":"Auto generated by spf13/cobra on 12-Jul-2019"},{"location":"aenker_keygen_pubkey.html","text":"aenker keygen pubkey print public key Synopsis Calculate the public key of a Curve25519 private key by performing a base point multiplication. You could use any source of 32 random bytes as input. When called as \"show\" a formatted seal command will be printed. aenker keygen pubkey [flags] Examples # show default key aenker show # new keypair from system randomness head -c32 /dev/urandom | base64 > mykey aenker pk -k mykey > mykey.pub Options -k, --key string private key (default \"/home/ansemjo/.local/share/aenker/aenkerkey\") -h, --help help for pubkey SEE ALSO aenker keygen - generate a new key Auto generated by spf13/cobra on 12-Jul-2019","title":"Aenker keygen pubkey"},{"location":"aenker_keygen_pubkey.html#aenker-keygen-pubkey","text":"print public key","title":"aenker keygen pubkey"},{"location":"aenker_keygen_pubkey.html#synopsis","text":"Calculate the public key of a Curve25519 private key by performing a base point multiplication. You could use any source of 32 random bytes as input. When called as \"show\" a formatted seal command will be printed. aenker keygen pubkey [flags]","title":"Synopsis"},{"location":"aenker_keygen_pubkey.html#examples","text":"# show default key aenker show # new keypair from system randomness head -c32 /dev/urandom | base64 > mykey aenker pk -k mykey > mykey.pub","title":"Examples"},{"location":"aenker_keygen_pubkey.html#options","text":"-k, --key string private key (default \"/home/ansemjo/.local/share/aenker/aenkerkey\") -h, --help help for pubkey","title":"Options"},{"location":"aenker_keygen_pubkey.html#see-also","text":"aenker keygen - generate a new key","title":"SEE ALSO"},{"location":"aenker_keygen_pubkey.html#auto-generated-by-spf13cobra-on-12-jul-2019","text":"","title":"Auto generated by spf13/cobra on 12-Jul-2019"},{"location":"aenker_open.html","text":"aenker open decrypt and authenticate a file Synopsis Decrypt a file and output authenticated plaintext. aenker open [flags] Examples aenker open -i archive.tar.gz.ae | tar -xz Options -k, --key string your private key (default \"/home/ansemjo/.local/share/aenker/aenkerkey\") -i, --input string input file, ciphertext (default: stdin) -o, --output string output file, plaintext (default: stdout) -h, --help help for open SEE ALSO aenker - Auto generated by spf13/cobra on 12-Jul-2019","title":"Decrypt files"},{"location":"aenker_open.html#aenker-open","text":"decrypt and authenticate a file","title":"aenker open"},{"location":"aenker_open.html#synopsis","text":"Decrypt a file and output authenticated plaintext. aenker open [flags]","title":"Synopsis"},{"location":"aenker_open.html#examples","text":"aenker open -i archive.tar.gz.ae | tar -xz","title":"Examples"},{"location":"aenker_open.html#options","text":"-k, --key string your private key (default \"/home/ansemjo/.local/share/aenker/aenkerkey\") -i, --input string input file, ciphertext (default: stdin) -o, --output string output file, plaintext (default: stdout) -h, --help help for open","title":"Options"},{"location":"aenker_open.html#see-also","text":"aenker -","title":"SEE ALSO"},{"location":"aenker_open.html#auto-generated-by-spf13cobra-on-12-jul-2019","text":"","title":"Auto generated by spf13/cobra on 12-Jul-2019"},{"location":"aenker_pubkey.html","text":"aenker pubkey print public key Synopsis Calculate the public key of a Curve25519 private key by performing a base point multiplication. You could use any source of 32 random bytes as input. When called as \"show\" a formatted seal command will be printed. aenker pubkey [flags] Examples # show default key aenker show # new keypair from system randomness head -c32 /dev/urandom | base64 > mykey aenker pk -k mykey > mykey.pub Options -k, --key string private key (default \"/home/ansemjo/.local/share/aenker/aenkerkey\") -h, --help help for pubkey SEE ALSO aenker - Auto generated by spf13/cobra on 12-Jul-2019","title":"Print public key"},{"location":"aenker_pubkey.html#aenker-pubkey","text":"print public key","title":"aenker pubkey"},{"location":"aenker_pubkey.html#synopsis","text":"Calculate the public key of a Curve25519 private key by performing a base point multiplication. You could use any source of 32 random bytes as input. When called as \"show\" a formatted seal command will be printed. aenker pubkey [flags]","title":"Synopsis"},{"location":"aenker_pubkey.html#examples","text":"# show default key aenker show # new keypair from system randomness head -c32 /dev/urandom | base64 > mykey aenker pk -k mykey > mykey.pub","title":"Examples"},{"location":"aenker_pubkey.html#options","text":"-k, --key string private key (default \"/home/ansemjo/.local/share/aenker/aenkerkey\") -h, --help help for pubkey","title":"Options"},{"location":"aenker_pubkey.html#see-also","text":"aenker -","title":"SEE ALSO"},{"location":"aenker_pubkey.html#auto-generated-by-spf13cobra-on-12-jul-2019","text":"","title":"Auto generated by spf13/cobra on 12-Jul-2019"},{"location":"aenker_seal.html","text":"aenker seal encrypt and protect a file Synopsis Encrypt a file for a recipient's public key and output authenticated ciphertext. aenker seal [flags] Examples tar -cz * | aenker seal -p $PUBLICKEY > archive.tar.gz.ae Options -p, --peer string receiver's public key -i, --input string input file, plaintext (default: stdin) -o, --output string output file, ciphertext (default: stdout) -h, --help help for seal SEE ALSO aenker - Auto generated by spf13/cobra on 12-Jul-2019","title":"Encrypt files"},{"location":"aenker_seal.html#aenker-seal","text":"encrypt and protect a file","title":"aenker seal"},{"location":"aenker_seal.html#synopsis","text":"Encrypt a file for a recipient's public key and output authenticated ciphertext. aenker seal [flags]","title":"Synopsis"},{"location":"aenker_seal.html#examples","text":"tar -cz * | aenker seal -p $PUBLICKEY > archive.tar.gz.ae","title":"Examples"},{"location":"aenker_seal.html#options","text":"-p, --peer string receiver's public key -i, --input string input file, plaintext (default: stdin) -o, --output string output file, ciphertext (default: stdout) -h, --help help for seal","title":"Options"},{"location":"aenker_seal.html#see-also","text":"aenker -","title":"SEE ALSO"},{"location":"aenker_seal.html#auto-generated-by-spf13cobra-on-12-jul-2019","text":"","title":"Auto generated by spf13/cobra on 12-Jul-2019"}]}